<!DOCTYPE html>
<!-- saved from url=(0043)https://orteil.dashnet.org/experiments/life -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Life</title>
<!--
Code and graphics by Orteil, 2012-2018
-->

<style>
*
{
	margin:0px;
	padding:0px;
}
html
{
	width:100%;
	height:100%;
}
body
{
	background:#000;
	color:#fff;
	font-family:Courier new,monospace;
	font-size:12px;
	width:100%;
	height:100%;
	display:grid;
	align-items:center;
	overflow:auto;
}

#game
{
	background:#243;
	color:#000;
	margin:auto;
	box-shadow:0 0 12px 4px rgba(255,255,255,0.25), 0 0 6px #000 inset;
	border:1px solid #000;
	width:640px;
	height:480px;
	position:relative;
	/*cursor:none;*/
}

canvas
{background:rgba(0,0,0,0);}

.button,.input
{
	margin:2px;
	font-variant:small-caps;
	border:1px outset #666;
	display:block;
	text-align:center;
	padding:2px 4px;
	background:#333;
	cursor:pointer;
	box-shadow:0 0 0px 1px #000,0 0 2px 2px #666, 0 0 6px #000 inset;
	text-shadow:0px 1px 0px #000;
	outline-color:#fff;
	vertical-align:middle;
}
.input{border-style:inset;cursor:text;color:#fff;font-variant:normal;}
.button:hover,.input:hover
{
	background:#666;
	box-shadow:0 0 0px 1px #000,0 0 2px 2px #fff, 0 0 6px #000 inset;
}

.button.active
{
	background:#171;
	box-shadow:0 0 0px 1px #000,0 0 2px 2px #fff, 0 0 6px #6b6 inset;
	border-color:#6b6;
}
.button.active:hover
{
	background:#393;
	box-shadow:0 0 0px 1px #000,0 0 4px 2px #fff, 0 0 6px #6b6 inset;
}
.button:active{background:#ccc;color:#000;text-shadow:0px 1px 0px #fff;}

.category
{
	float:left;
	text-align:center;
	position:relative;
}

#rulesList
{
	background:rgba(0,0,0,0.8);
	position:absolute;
	right:0px;
	bottom:50%;
	z-index:10000;
	text-align:center;
	display:none;
}
.rule
{
	padding:4px 16px;
	margin:2px 0px;
	cursor:pointer;
}
.rule:hover
{
	background:#fff;
	color:#000;
}
.rule:active
{
	background:#000;
	color:#fff;
}

</style>
</head>
<body>

<div>
	<div id="game" style="width: 640px; height: 480px;">
		<canvas id="screen" width="640" height="480"></canvas>
	</div>
	<div style="width:640px;margin:8px auto;">
		<div class="category">
			<div class="button" onclick="Generate=&#39;lowrandom&#39;;">Fill (low)</div>
			<div class="button" onclick="Generate=&#39;random&#39;;">Fill (medium)</div>
			<div class="button" onclick="Generate=&#39;highrandom&#39;;">Fill (high)</div>
			<div class="button" onclick="Generate=&#39;empty&#39;;">Empty</div>
		</div>
		<div class="category">
			<div class="button" onclick="Graphics=Graphics.toggle();if (Graphics) this.className=&#39;button active&#39;; else this.className=&#39;button&#39;;">Color fade</div>
		</div>
		<div class="category" style="float:right;">
			Rules : <input class="input" id="rules" onkeyup="Rules.str=this.value;buildRules();" value="">
			<div style="display:inline-block;" class="button" onclick="randomRules();Generate=&#39;random&#39;;">ðŸŽ²</div>
			<div style="display:inline-block;" class="button" onclick="l(&#39;rulesList&#39;).style.display=&#39;block&#39;;">ðŸ”¬</div>
			<div id="rulesList"><div class="rule" onclick="Rules.str=&#39;B3S23&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Classic Life</div><div class="rule" onclick="Rules.str=&#39;B3S45&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Burning fields</div><div class="rule" onclick="Rules.str=&#39;R5B678S8769&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Animalia</div><div class="rule" onclick="Rules.str=&#39;B253S23456&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Pyramids</div><div class="rule" onclick="Rules.str=&#39;B345S2468&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Agriculture</div><div class="rule" onclick="Rules.str=&#39;B23S24&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Traffic</div><div class="rule" onclick="Rules.str=&#39;B17S12368&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Fortress</div><div class="rule" onclick="Rules.str=&#39;B12S234&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Montezuma</div><div class="rule" onclick="Rules.str=&#39;B23S46&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Computer</div><div class="rule" onclick="Rules.str=&#39;B17S26&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Fractamids</div><div class="rule" onclick="Rules.str=&#39;B3678S34678&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Day &amp; night</div><div class="rule" onclick="Rules.str=&#39;B678S45678&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Blots</div><div class="rule" onclick="Rules.str=&#39;B678S3458&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Mottling</div><div class="rule" onclick="Rules.str=&#39;B5678S45678&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Caves</div><div class="rule" onclick="Rules.str=&#39;B4S3457&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Busy islands</div><div class="rule" onclick="Rules.str=&#39;B15687S1378&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Permafrost</div><div class="rule" onclick="Rules.str=&#39;B1S1&#39;;buildRules();l(&#39;rules&#39;).value=Rules.str;l(&#39;rulesList&#39;).style.display=&#39;none&#39;;">Blinking blocks</div></div>
		</div>

		<div style="clear:both;padding-top:8px;">
			Cellular automata - Orteil 2012-2018
			<div id="rulestext">Cells appear in tiles that have 2  or 3 neighbors.<br>Cells survive in tiles that have 2  or 4 neighbors.<br>Search range for neighbors is 3 cells.<br></div>
		</div>

	</div>

	<div id="stack" style="display:none;"><canvas id="stack0" width="320" height="240"></canvas></div>
	<div id="debug"></div>
</div>



<script>

function l(what)
{return document.getElementById(what);}

Number.prototype.toggle=function()
{if (this==1) return 0; else return 1;}


function GetMouseCoords(e) {
	var posx = 0;
	var posy = 0;
	if (!e) var e = window.event;
	if (e.pageX || e.pageY) 	{
		posx = e.pageX;
		posy = e.pageY;
	}
	else if (e.clientX || e.clientY) 	{
		posx = e.clientX + document.body.scrollLeft
			+ document.documentElement.scrollLeft;
		posy = e.clientY + document.body.scrollTop
			+ document.documentElement.scrollTop;
	}
	
	var el=Game;
    var x = 0;
    var y = 0;
    while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
        x += el.offsetLeft - el.scrollLeft;
        y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }
	
	Game.mouseX=Math.floor(Math.min(Game.w,Math.max(0,posx-x)));
	Game.mouseY=Math.floor(Math.min(Game.h,Math.max(0,posy-y)));
}

var DebugText='';
function trace(what) {DebugText+='<br>'+what;}
function traceFlush() {/*Debug.innerHTML=DebugText;*/DebugText='';}

function pointDist(x1,y1,x2,y2)
{return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));}

function pointDir(x1,y1,x2,y2)
{return Math.atan2(y1-y2,x2-x1)+Math.PI/2;}


function LoadPic(src,name)
{
	Img.loading++;
	Img[name]=new Image();
	Img[name].src=src;
	trace('loading '+src+'...');
	Img[name].onload=function(){Img.loading--;trace('loaded');};
	return Img[name];
}

function Click()
{
	Game.click=1;
}
function ClickDown()
{
	Game.clickdown=1;
}
function ClickUp()
{
	Game.clickup=1;
}

CanvasRenderingContext2D.prototype.drawLine=function(x,y,x2,y2)
{
	var ctx=this;
	ctx.beginPath();
	ctx.moveTo(x,y);
	ctx.lineTo(x2,y2);
	ctx.stroke();
}

CanvasRenderingContext2D.prototype.invert=function()
{

	var ctx=this;
    var imgd=ctx.getImageData(0,0,ctx.canvas.width,ctx.canvas.height);
    var pix=imgd.data;
    for (var i = 0, n = pix.length; i < n; i += 4) {
       pix[i  ] = 255 - pix[i  ]; // red
       pix[i+1] = 255 - pix[i+1]; // green
       pix[i+2] = 255 - pix[i+2]; // blue
    }
    ctx.putImageData(imgd,0,0);
}




function choose(arr)
{
	return arr[Math.floor(Math.random()*arr.length)];
}


BitmapsN=0;
function Bitmap(width,height)
{
	l('stack').innerHTML+='<canvas id="stack'+BitmapsN+'" width="'+width+'" height="'+height+'"></canvas>';
	var thisBitmap=l('stack'+BitmapsN);
	thisBitmap.ctx=thisBitmap.getContext('2d');
	BitmapsN++;
	return thisBitmap;
}

function clone(source) {
    for (i in source) {
        if (typeof source[i] == 'source') {
            this[i] = new clone(source[i]);
        }
        else{
            this[i] = source[i];
	}
    }
}

Game=l('game');
Screen=l('screen');
Debug=l('debug');
Game.on=0;


function buildRules()
{
	Rules['b']=[];
	Rules['s']=[];
	Rules['r']=[];
	var str=Rules.str.toLowerCase().split('');
	var thisrule='';
	for (var i in str)
	{
		if (str[i]=='b') thisrule='b';
		else if (str[i]=='s') thisrule='s';
		else if (str[i]=='r') thisrule='r';
		else if (!isNaN(str[i]) && thisrule!='') Rules[thisrule].push(parseInt(str[i]));
	}
	if (Rules['r'].length==0) Rules['r'].push(3);
	
	var str='';
	if (Rules['b'].length>0) str+='Cells appear in tiles that have ';
	var count=0;
	for (var i in Rules['b'])
	{
		if (count==Rules['b'].length-1 && Rules['b'].length>1) str+=' or '+Rules['b'][i]+' '; else if (Rules['b'].length<3) str+=Rules['b'][i]+' '; else str+=Rules['b'][i]+', ';
		count++;
	}
	if (Rules['b'].length>0) str+='neighbors.<br>';
	if (Rules['s'].length>0) str+='Cells survive in tiles that have ';
	var count=0;
	for (var i in Rules['s'])
	{
		if (count==Rules['s'].length-1 && Rules['s'].length>1) str+=' or '+Rules['s'][i]+' '; else if (Rules['s'].length<3) str+=Rules['s'][i]+' '; else str+=Rules['s'][i]+', ';
		count++;
	}
	if (Rules['s'].length>0) str+='neighbors.<br>';
	if (Rules['r'].length>0) str+='Search range for neighbors is '+Rules['r'][0]+' cells.<br>';
	l('rulestext').innerHTML=str;	
}

function randomRules()
{
	Rules=[];
	Rules.str='B3S23';
	Rules.str='B';
	for (var i=1;i<9;i++)
	{if (Math.pow(Math.random(),2)>0.5) {Rules.str+=''+i;}}
	Rules.str+='S';
	for (var i=1;i<9;i++)
	{if (Math.pow(Math.random(),2)>0.5) {Rules.str+=''+i;}}
	if (Math.random()<0.1) Rules.str+='R5';
	l('rules').value=Rules.str;
	buildRules();
}

Game.Init=function()
{
	//initialize game engine here plz
	Game.on=1;
	Game.fps=60;
	Game.T=0;
	Game.w=640;
	Game.h=480;
	Game.style.width=Game.w+'px';
	Game.style.height=Game.h+'px';
	Screen.width=Game.w;
	Screen.height=Game.h;
	Game.mouseX=Game.w/2;
	Game.mouseY=Game.h/2;
	Game.mouseOn=0;
	Game.click=0;
	Game.clickdown=0;
	Game.clickup=0;
	
	Game.view=[0,0];
	Game.viewT=[0,0];
	
	Graphics=0;//advanced graphics ?
	
	document.onmousemove=GetMouseCoords;
	document.onclick=Click;
	document.onmousedown=ClickDown;
	document.onmouseup=ClickUp;
	ctx=Screen.getContext('2d');
	
	Img=[];
	Img.loading=0;
	
	
	Ratio=2;
	Map=new Bitmap(Game.w/Ratio,Game.h/Ratio);
	
	
	SampleRules=[
	'B3S23|Classic Life',
	'B3S45|Burning fields',
	'R5B678S8769|Animalia',
	'B253S23456|Pyramids',
	'B345S2468|Agriculture',
	'B23S24|Traffic',
	'B17S12368|Fortress',
	'B12S234|Montezuma',
	'B23S46|Computer',
	'B17S26|Fractamids',
	'B3678S34678|Day & night',
	'B678S45678|Blots',
	'B678S3458|Mottling',
	'B5678S45678|Caves',
	'B4S3457|Busy islands',
	'B15687S1378|Permafrost',
	'B1S1|Blinking blocks'
	];
	
	var str='';
	for (var i in SampleRules)
	{
		var me=SampleRules[i].split('|');
		SampleRules[i]=me;
		str+='<div class="rule" onclick="Rules.str=\''+me[0]+'\';buildRules();l(\'rules\').value=Rules.str;l(\'rulesList\').style.display=\'none\';">'+me[1]+'</div>';
	}
	l('rulesList').innerHTML=str;
	
	Rules=[];
	Rules.str=choose(SampleRules)[0];
	l('rules').value=Rules.str;
	buildRules();
	//randomRules();
	
	Generate='random';
	
}



function getCell(pixold,x,y)
{
	//to be called within the distortion loop in Game.Draw()
	if (x<0) x+=Map.width;
	if (x>=Map.width) x-=Map.width;
	if (y<0) y+=Map.height;
	if (y>=Map.height) y-=Map.height;
	//x=x%Map.width;
	//y=y%Map.height;
	return pixold[Map.width*4*(y)+4*(x)]/255;
}

Game.Draw=function()
{
	//all drawing operations; no game logic here plz
	
	ctx.mozImageSmoothingEnabled=false;
	ctx.strokeStyle='rgb(255,255,255)';
	ctx.fillStyle='rgba(0,0,0,1)';
	
//	ctx.clearRect(0,0,Game.w,Game.h);
	
	if (1)
	{
		//distortion
		//man, dafuk
		//I should be doing that in a separate array instead and then assign it to the map
		var imgd=Map.ctx.getImageData(0,0,Map.width,Map.height);
		var pix=imgd.data;
		var pixold=Map.ctx.getImageData(0,0,Map.width,Map.height).data;
		var rad=0;//undrawable margin
		var search=Rules['r'][0];//radius to search for neighbors; allows for "Larger than Life" rules (Game of Life has a search radius of 3)
		for (var i = 0, n = pix.length; i < n; i += 4) {
			var posy=Math.floor(i/4/Map.width);
			var posx=Math.floor((i/4)%Map.width);
			if (1==1)//posx>rad && posx<Map.width-rad && posy>rad && posy<Map.height-rad)
			{
				var val=pixold[i]/255;
				var neighbors=0;
				if (!Game.clickdown)
				{
					//var neighbors=pixold[i+Map.width*4*(-1)+4*(0)]+pixold[i+Map.width*4*(1)+4*(0)]+pixold[i+Map.width*4*(0)+4*(-1)]+pixold[i+Map.width*4*(0)+4*(1)];
					/*var neighbors=pixold[i+Map.width*4*(-1)+4*(0)]+pixold[i+Map.width*4*(1)+4*(0)]+pixold[i+Map.width*4*(0)+4*(-1)]+pixold[i+Map.width*4*(0)+4*(1)]+
					pixold[i+Map.width*4*(-1)+4*(-1)]+pixold[i+Map.width*4*(-1)+4*(1)]+pixold[i+Map.width*4*(1)+4*(-1)]+pixold[i+Map.width*4*(1)+4*(1)];*/
					var neighbors=0;
					for (var y=0;y<search;y++)
					{
						for (var x=0;x<search;x++)
						{
							neighbors+=getCell(pixold,posx-Math.floor(search/2)+x,posy-Math.floor(search/2)+y)*255;//pixold[i+(-Math.floor(search/2)+y)*4*Map.width+4*(-Math.floor(search/2)+x)];
						}
					}
					neighbors-=pixold[i];
					neighbors=neighbors/255;
					if (Rules['s'].indexOf(neighbors)==-1) val=0;
					if (Rules['b'].indexOf(neighbors)>-1) val=1;
					/*if (neighbors<2 && val==1) val=0;
					if (neighbors>3 && val==1) val=0;
					if (neighbors==3) val=1;*/
					//if (neighbors==6) val=1;
					
				}
				if (Game.mouseOn && Math.abs(Math.floor(posx+Math.random()*4-2)-Math.floor(Game.mouseX/Ratio))<1 && Math.abs(Math.floor(posy+Math.random()*4-2)-Math.floor(Game.mouseY/Ratio))<1) val=1;
				
				
				var mix=1;
				var x=posx/Map.width;
				mix=Math.sqrt(1-(1-x*2)*(1-x*2));
				var y=posy/Map.height;
				mix*=Math.sqrt(1-(1-y*2)*(1-y*2));
				mix=Math.pow(mix,20);
				if (Generate=='random' && Math.random()<0.5) val=1; else if (Generate=='random') val=0;
				else if (Generate=='lowrandom' && Math.random()<0.05) val=1; else if (Generate=='lowrandom') val=0;
				else if (Generate=='highrandom' && Math.random()<0.75) val=1; else if (Generate=='highrandom') val=0;
				else if (Generate=='empty') val=0;
				pix[i]=val*255; // red
				if (Graphics)
				{
					pix[i+1]=Math.min(255,pixold[i+1]+20)*val; // green
					pix[i+2]=Math.min(255,pixold[i+2]+10)*val; // blue
				}
				else
				{
					pix[i+1]=val*255;
					pix[i+2]=val*255;
				}
				pix[i+3] = 255; // alpha
			}
			else {pix[i]=255;pix[i+1]=0;pix[i+2]=0;pix[i+3]=255;}
		}
		Map.ctx.putImageData(imgd,0,0);
		if (Graphics) ctx.globalAlpha=0.15;
		ctx.drawImage(Map,0,0,Map.width,Map.height,0,0,Game.w,Game.h);
		ctx.globalAlpha=1;
	}
	if (Generate!='') Generate='';
	
	
	/*var grd=ctx.createRadialGradient(Game.w/2,Game.h/2,0,Game.w/2,Game.h/2,Game.w*0.75);
	grd.addColorStop(0,'rgba(0,0,0,0)');
	grd.addColorStop(1,'rgba(0,0,0,0.5)');
	ctx.fillStyle=grd;
	ctx.fillRect(0,0,Game.w,Game.h);*/

	if (Game.mouseOn && 1==2)
	{
	
		ctx.fillStyle='rgba(255,255,255,1)';
		ctx.beginPath();
		ctx.arc(Game.mouseX,Game.mouseY,10,0,Math.PI*2,true);
		ctx.closePath();
		ctx.fill();
		if (Game.clickdown && 1==2)
		{
			ctx.globalAlpha=1-(Game.T%20)/20;
			ctx.beginPath();
			ctx.arc(Game.mouseX,Game.mouseY,(Game.T%20)/20*50,0,Math.PI*2,true);
			ctx.closePath();
			ctx.fill();
			ctx.globalAlpha=1;
		}
		
	}
}

Game.Logic=function()
{
	//if (Game.T==0) {Rules.str='B3678S34678';buildRules();}
	//else if (Game.T==60) {Rules.str='B56789S456789';buildRules();}
	
	Game.viewT=[-(Game.w/2-Game.mouseX)+64,-(Game.h/2-Game.mouseY)+0];//[1-Game.mouseX/Game.w,1-Game.mouseY/Game.h];
	
	if (Game.click) trace('click');
	if (Game.clickdown) trace('clickdown');
	if (Game.clickup) trace('clickup');
	Game.click=0;
	if (Game.clickup) Game.clickdown=0;
	Game.clickup=0;
	if (Game.mouseX>0 && Game.mouseY>0 && Game.mouseX<Game.w && Game.mouseY<Game.h) Game.mouseOn=1; else Game.mouseOn=0;
	Game.T++;
}

Game.Main=function()
{
	//main game loop
	
	if (!Game.on) Game.Init();
	
	Game.Logic();
	Game.Draw();
	
	trace(Img.loading);
	trace('running '+Game.T);
	
	traceFlush();

	setTimeout(Game.Main,1000/Game.fps);
}

Game.Main();

</script>



</body></html>